swirl()
library(swirl)
swirl()
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit
submit()
help()
help (standard deviation)
help(stddev)
??stddev
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(c[x], c(8,4,0)))
evaluate(function(x){ c[x]}, c(8,4,0)))
evaluate(function(x){ c[x]}, c(8,4,0))
evaluate(function(x){ c[x]}, c(8,4,0)
1
help()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("come here watson")
submit()
submit()
mad_libs("denver", "beautiful", "cat")
submit()
submit()
"I"%p%"love"
"I"%p%"love"%p%"R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
print d1
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y
x
z
g
pollutantscript
load(pollutantscript)
load("pollutantscript.r")
load("pollutantscript")
source("pollutantscript.R")
source("pollutantscript.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr("specdata")
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
load(pollutantscript.R)
load("pollutantscript.R")
load("pollutantscript.R")
load("pollutantscript.R")
load("pollutantscript.R")
load("pollutantscript.R")
library(datasets)
data("iris")
?iris
s <- split(iris, iris$Sepal.Length)
s
s
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
apply(iris, 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
debug(ls)
ls
?ls
debug(ls)
ls
debug(ls)
debug(ls)
ls(iria)
0
exit
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
?solve
?inverse.gaussian
source("cachematrix")
cwd
cwd("C:\Users\Delynn Laptop\Documents\GitHub\ProgrammingAssignment2")
source("cachematrix")
source("cachematrix.r")
?source
print cwd
print cwd()
?cwd
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
cachesolve(temp)
cacheSolve(temp)
matrix(rexp(200, rate=.1), ncol=20)
x <- matrix(rexp(200, rate=.1), ncol=20)
x
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix(1:15)
cacheSolve(1:15)
